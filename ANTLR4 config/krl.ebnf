

module
    =
    (module_data | module_routines) $
    ;


module_routines
    =
    main_routine {sub_routine | NEWLINE}
    ;


main_routine
    =
    procedure_definition | function_definition
    ;


sub_routine
    =
    procedure_definition | function_definition
    ;


procedure_definition
    =
    [GLOBAL] DEF procedure_name formal_parameters NEWLINE routine_body END
    ;


procedure_name
    =
    IDENTIFIER
    ;


function_definition
    =
    [GLOBAL]
    DEFFCT
    type_
    function_name
    formal_parameters
    NEWLINE
    routine_body
    ENDFCT
    ;


function_name
    =
    IDENTIFIER
    ;


module_data
    =
    DEFDAT module_name [PUBLIC] NEWLINE data_list ENDDAT {NEWLINE}
    ;


module_name
    =
    IDENTIFIER
    ;


data_list
    =
    {
        | NEWLINE
        | forward_declaration NEWLINE
        | type_declaration NEWLINE
        | variable_declaration_in_data_list NEWLINE
        | array_initialisation NEWLINE
        | import_statement NEWLINE
    }
    ;


array_initialisation
    =
    IDENTIFIER array_variable_suffix '=' unary_plus_minux_expression
    ;


type_declaration
    =
    structure_definition | enum_definition
    ;


structure_definition
    =
    [GLOBAL]
    STRUC
    type_name
    type_
    variable_name
    variable_list_rest
    {',' type_ variable_name variable_list_rest}
    ;


enum_definition
    =
    [GLOBAL] ENUM type_name enum_value {',' enum_value}
    ;


enum_value
    =
    IDENTIFIER
    ;


variable_declaration
    =
    [DECL] (type_ variable_name variable_list_rest | signal_declaration)
    ;


signal_declaration
    =
    SIGNAL IDENTIFIER primary [TO primary]
    ;


variable_declaration_in_data_list
    =
    [DECL]
    [GLOBAL]
    [CONST]
    (
        | type_ variable_name (variable_list_rest | variable_initialisation)
        | signal_declaration
    )
    ;


variable_list_rest
    =
    {',' variable_name}
    ;


variable_initialisation
    =
    '=' unary_plus_minux_expression
    ;


struct_literal
    =
    '{' [type_name ':'] struct_element_list '}'
    ;


struct_element_list
    =
    struct_element {',' struct_element}
    ;


struct_element
    =
    variable_name unary_plus_minux_expression
    ;


formal_parameters
    =
    '(' [parameter {',' parameter}] ')'
    ;


parameter
    =
    variable_name [parameter_call_type]
    ;


routine_body
    =
    routine_data_section routine_implementation_section
    ;


routine_data_section
    =
    {
        | forward_declaration NEWLINE
        | variable_declaration NEWLINE
        | (NEWLINE) NEWLINE
        | import_statement NEWLINE
    }
    ;


forward_declaration
    =
    | EXT procedure_name formal_parameters_with_type
    | EXTFCT type_ function_name formal_parameters_with_type
    ;


formal_parameters_with_type
    =
    '(' [parameter_with_type {',' parameter_with_type}] ')'
    ;


parameter_with_type
    =
    type_ [parameter_call_type]
    ;


parameter_call_type
    =
    ':' IDENTIFIER
    ;


import_statement
    =
    IMPORT type_ variable_name IS '/R1/' module_name '..' variable_name
    ;


variable_name
    =
    IDENTIFIER [array_variable_suffix]
    ;


array_variable_suffix
    =
    '[' [expression [',' [expression [',' [expression]]]]] ']'
    ;


routine_implementation_section
    =
    statement_list
    ;


statement_list
    =
    {statement}
    ;


statement
    =
        CONTINUE NEWLINE
    |
        EXIT NEWLINE
    |
        FOR
        IDENTIFIER
        '='
        expression
        TO
        expression
        [IDENTIFIER expression]
        NEWLINE
        statement_list
        ENDFOR
    |
        GOTO IDENTIFIER NEWLINE
    |
        HALT NEWLINE
    |
        IF
        expression
        THEN
        NEWLINE
        statement_list
        [ELSE NEWLINE statement_list]
        ENDIF
        NEWLINE
    |
        LOOP NEWLINE statement_list ENDLOOP NEWLINE
    |
        REPEAT NEWLINE statement_list UNTIL expression NEWLINE
    |
        SWITCH
        expression
        NEWLINE
        switch_block_statement_groups
        ENDSWITCH
        NEWLINE
    |
        WAIT FOR expression NEWLINE
    |
        WAIT SEC expression NEWLINE
    |
        WHILE expression NEWLINE statement_list ENDWHILE NEWLINE
    |
        RETURN [assignment_expression] NEWLINE
    |
        BRAKE [IDENTIFIER] NEWLINE
    |
        assignment_expression NEWLINE
    |
        IDENTIFIER ':' NEWLINE
    |
        NEWLINE
    |
        [GLOBAL]
        INTERRUPT
        DECL
        primary
        WHEN
        expression
        DO
        assignment_expression
        NEWLINE
    |
        INTERRUPT IDENTIFIER [primary] NEWLINE
    |
        (PTP | PTP_REL)
        geometric_expression
        [C_PTP
        [
        C_DIS | C_ORI | C_VEL
        ]
        ]
        NEWLINE
    |
        LIN
        geometric_expression
        [
        C_DIS | C_ORI | C_VEL
        ]

        NEWLINE
    |
        LIN_REL
        geometric_expression
        [
        C_DIS | C_ORI | C_VEL
        ]

        [enum_element]
        NEWLINE
    |
        (CIRC | CIRC_REL)
        geometric_expression
        ','
        geometric_expression
        [',' IDENTIFIER primary]
        [
        C_DIS | C_ORI | C_VEL
        ]

        NEWLINE
    |
        TRIGGER
        WHEN
        (IDENTIFIER)
        '='
        expression
        DELAY
        '='
        expression
        DO
        assignment_expression
        [PRIO '=' expression]
        NEWLINE
    |
        analog_input_statement NEWLINE
    |
        analog_output_statement NEWLINE
    ;


analog_output_statement
    =
    ANOUT
    (
        | IDENTIFIER assignment_expression {IDENTIFIER '=' literal}
        | IDENTIFIER IDENTIFIER
    )
    ;


analog_input_statement
    =
    ANIN (IDENTIFIER assignment_expression | IDENTIFIER IDENTIFIER)
    ;


switch_block_statement_groups
    =
    {NEWLINE} {case_label statement_list}+ [default_label statement_list]
    ;


case_label
    =
    CASE expression {',' expression} NEWLINE
    ;


default_label
    =
    DEFAULT NEWLINE
    ;


expression_list
    =
    assignment_expression {',' assignment_expression}
    ;


assignment_expression
    =
    expression {'=' expression}
    ;


expression
    =
    conditional_or_expression {relational_op conditional_or_expression}
    ;


relational_op
    =
    '==' | '<>' | '<=' | '>=' | /[<>]/
    ;


conditional_or_expression
    =
    exclusive_or_expression {(OR | B_OR) exclusive_or_expression}
    ;


exclusive_or_expression
    =
    conditional_and_expression {(EXOR | B_EXOR) conditional_and_expression}
    ;


conditional_and_expression
    =
    additive_expression {(AND | B_AND) additive_expression}
    ;


additive_expression
    =
    multiplicative_expression {/[+-]/ multiplicative_expression}
    ;


multiplicative_expression
    =
    geometric_expression {?"[*/]" geometric_expression}
    ;


geometric_expression
    =
    unary_not_expression {':' unary_not_expression}
    ;


unary_not_expression
    =
    | NOT unary_not_expression
    | B_NOT unary_not_expression
    | unary_plus_minux_expression
    ;


unary_plus_minux_expression
    =
    | '+' unary_plus_minux_expression
    | '-' unary_plus_minux_expression
    | primary
    ;


primary
    =
    par_expression | variable_name {'.' variable_name} [arguments] | literal
    ;


par_expression
    =
    '(' assignment_expression ')'
    ;


type_
    =
    primitive_type ['[' [intliteral] ']'] | type_name ['[' [intliteral] ']']
    ;


type_name
    =
    IDENTIFIER
    ;


primitive_type
    =
    BOOL | CHAR | INT | REAL
    ;


arguments
    =
    '(' [expression_list] ')'
    ;


literal
    =
    | intliteral
    | floatliteral
    | CHARLITERAL
    | STRINGLITERAL
    | struct_literal
    | TRUE
    | FALSE
    | enum_element
    ;


enum_element
    =
    '#' IDENTIFIER
    ;


AND
    =
    A N D
    ;


ANIN
    =
    A N I N
    ;


ANOUT
    =
    A N O U T
    ;


B_AND
    =
    B '_' A N D
    ;


B_NOT
    =
    B '_' N O T
    ;


B_OR
    =
    B '_' O R
    ;


B_EXOR
    =
    B '_' E X O R
    ;


BOOL
    =
    B O O L
    ;


BRAKE
    =
    B R A K E
    ;


C_DIS
    =
    C '_' D I S
    ;


C_ORI
    =
    C '_' O R I
    ;


C_PTP
    =
    C '_' P T P
    ;


C_VEL
    =
    C '_' V E L
    ;


CASE
    =
    C A S E
    ;


CAST_FROM
    =
    C A S T '_' F R O M
    ;


CAST_TO
    =
    C A S T '_' T O
    ;


CHAR
    =
    C H A R
    ;


CIRC_REL
    =
    C I R C '_' R E L
    ;


CIRC
    =
    C I R C
    ;


CONST
    =
    C O N S T
    ;


CONTINUE
    =
    C O N T I N U E
    ;


DELAY
    =
    D E L A Y
    ;


DECL
    =
    D E C L
    ;


DEF
    =
    D E F
    ;


DEFAULT
    =
    D E F A U L T
    ;


DEFDAT
    =
    D E F D A T
    ;


DEFFCT
    =
    D E F F C T
    ;


DO
    =
    D O
    ;


ELSE
    =
    E L S E
    ;


END
    =
    E N D
    ;


ENDDAT
    =
    E N D D A T
    ;


ENDFCT
    =
    E N D F C T
    ;


ENDFOR
    =
    E N D F O R
    ;


ENDIF
    =
    E N D I F
    ;


ENDLOOP
    =
    E N D L O O P
    ;


ENDSWITCH
    =
    E N D S W I T C H
    ;


ENDWHILE
    =
    E N D W H I L E
    ;


ENUM
    =
    E N U M
    ;


EXIT
    =
    E X I T
    ;


EXT
    =
    E X T
    ;


EXTFCT
    =
    E X T F C T
    ;


FALSE
    =
    F A L S E
    ;


FOR
    =
    F O R
    ;


GLOBAL
    =
    G L O B A L
    ;


GOTO
    =
    G O T O
    ;


HALT
    =
    H A L T
    ;


IF
    =
    I F
    ;


IMPORT
    =
    I M P O R T
    ;


INTERRUPT
    =
    I N T E R R U P T
    ;


INT
    =
    I N T
    ;


IS
    =
    I S
    ;


LIN_REL
    =
    L I N '_' R E L
    ;


LIN
    =
    L I N
    ;


LOOP
    =
    L O O P
    ;


MAXIMUM
    =
    M A X I M U M
    ;


MINIMUM
    =
    M I N I M U M
    ;


NOT
    =
    N O T
    ;


OR
    =
    O R
    ;


PRIO
    =
    P R I O
    ;


PTP_REL
    =
    P T P '_' R E L
    ;


PTP
    =
    P T P
    ;


PUBLIC
    =
    P U B L I C
    ;


REAL
    =
    R E A L
    ;


REPEAT
    =
    R E P E A T
    ;


RETURN
    =
    R E T U R N
    ;


SEC
    =
    S E C
    ;


SIGNAL
    =
    S I G N A L
    ;


STRUC
    =
    S T R U C
    ;


SWITCH
    =
    S W I T C H
    ;


THEN
    =
    T H E N
    ;


TO
    =
    T O
    ;


TRIGGER
    =
    T R I G G E R
    ;


TRUE
    =
    T R U E
    ;


UNTIL
    =
    U N T I L
    ;


WAIT
    =
    W A I T
    ;


WHEN
    =
    W H E N
    ;


WHILE
    =
    W H I L E
    ;


EXOR
    =
    E X O R
    ;


A
    =
    /[aA]/
    ;


B
    =
    /[bB]/
    ;


C
    =
    /[cC]/
    ;


D
    =
    /[dD]/
    ;


E
    =
    /[eE]/
    ;


F
    =
    /[fF]/
    ;


G
    =
    /[gG]/
    ;


H
    =
    /[hH]/
    ;


I
    =
    /[iI]/
    ;


J
    =
    /[jJ]/
    ;


K
    =
    /[kK]/
    ;


L
    =
    /[lL]/
    ;


M
    =
    /[mM]/
    ;


N
    =
    /[nN]/
    ;


O
    =
    /[oO]/
    ;


P
    =
    /[pP]/
    ;


Q
    =
    /[qQ]/
    ;


R
    =
    /[rR]/
    ;


S
    =
    /[sS]/
    ;


T
    =
    /[tT]/
    ;


U
    =
    /[uU]/
    ;


V
    =
    /[vV]/
    ;


W
    =
    /[wW]/
    ;


X
    =
    /[xX]/
    ;


Y
    =
    /[yY]/
    ;


Z
    =
    /[zZ]/
    ;


HEADERLINE
    =
    '&' !/[\n\r]*/ /./ ('\\r\\n' | /[\r\n]/ | $)
    ;


ws
    =
    /[ \t\u000C]/
    ;


NEWLINE
    =
    ['\\r'] '\\n'
    ;


LINE_COMMENT
    =
    ';' !/[\n\r]*/ /./
    ;


CHARLITERAL
    =
    "\\'" (ESCAPE_SEQUENCE | !/[\'\\\r\n]/ /./) "\\'"
    ;


STRINGLITERAL
    =
    '"' {ESCAPE_SEQUENCE | !/[\\"\r\n]/ /./} '"'
    ;


ESCAPE_SEQUENCE
    =
    '\\\\' (/[btnfr"\'\\]/ | /[0-3][0-7][0-7]/ | /[0-7][0-7]/ | /[0-7]/)
    ;


floatliteral
    =
    | /[0-9]+/ '.' /[0-9]*/ [EXPONENT]
    | '.' /[0-9]+/ [EXPONENT]
    | /[0-9]+/ EXPONENT
    ;


EXPONENT
    =
    E [/[+-]/] /[0-9]+/
    ;


intliteral
    =
    /[0-9]+/ | HEX_PREFIX {HEX_DIGIT}+ "\\'" | BIN_PREFIX {BIN_DIGIT}+ "\\'"
    ;


HEX_PREFIX
    =
    "\\'" H
    ;


HEX_DIGIT
    =
    /[0-9a-fA-F]/
    ;


BIN_PREFIX
    =
    "\\'" B
    ;


BIN_DIGIT
    =
    /[01]/
    ;


IDENTIFIER
    =
    IDENTIFIER_START {IDENTIFIER_PART}
    ;


IDENTIFIER_START
    =
    /[a-zA-Z_$]/
    ;


IDENTIFIER_PART
    =
    IDENTIFIER_START | /[0-9]/
    ;

